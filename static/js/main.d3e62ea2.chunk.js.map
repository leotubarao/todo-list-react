{"version":3,"sources":["components/Header/index.js","store/reducers/index.js","store/reducers/todos.js","store/index.js","store/actions/todos.js","components/TodoList/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","class","combineReducers","todos","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","id","Date","now","text","payload","filter","todo","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","store","createStore","persistor","persistStore","addTodo","deleteTodo","TodoList","newTodoText","handleSubmit","event","preventDefault","_this","trim","props","setState","handleDeleteTodo","_this2","this","onSubmit","placeholder","onChange","e","target","value","map","aria-label","onClick","aria-hidden","Component","connect","dispatch","bindActionCreators","TodoActions","App","components_Header","es","integration_react","loading","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3e62ea2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst Header = () => (\r\n    <div className=\"container mt-4\">\r\n        <div className=\"jumbotron bg-light v1 d-flex flex-column flex-sm-row align-items-center\">\r\n            <h1 class=\"ltco mr-sm-auto\"></h1>\r\n            <h2 class=\"mt-4 mt-sm-0\">To-Do List</h2>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport todos from \"./todos\";\r\n\r\nexport default combineReducers({\r\n    todos\r\n});","export default function todos(state = [], action) {\r\n    switch (action.type) {\r\n        case \"ADD_TODO\":\r\n        return [...state, { id: Date.now(), text: action.payload.text }];\r\n        case \"DELETE_TODO\":\r\n        return state.filter(todo => todo.id !== action.id);\r\n        default:\r\n        return state;\r\n    }\r\n}","import { createStore } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\n\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nconst store = createStore(persistedReducer);\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor};","export const addTodo = text => ({\r\n    type: \"ADD_TODO\",\r\n    payload: { text }\r\n});\r\n\r\nexport const deleteTodo = id => ({\r\n    type: \"DELETE_TODO\",\r\n    id\r\n});","import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as TodoActions from \"../../store/actions/todos\";\r\n\r\nclass TodoList extends Component {\r\n    state = {\r\n        newTodoText: \"\"\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (this.state.newTodoText.trim().length > 0)\r\n            this.props.addTodo(this.state.newTodoText);\r\n\r\n        this.setState({ newTodoText: \"\" });\r\n    };\r\n\r\n    handleDeleteTodo = (id, event) => {\r\n        event.preventDefault();\r\n\r\n        this.props.deleteTodo(id);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container pb-5\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"To do\"\r\n                            onChange={e => this.setState({ newTodoText: e.target.value })}\r\n                            value={this.state.newTodoText}\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Salvar</button>\r\n                </form>\r\n                <ul className=\"list-group mt-5\">\r\n                    {this.props.todos.map(todo => (\r\n                        <li className=\"list-group-item\" key={todo.id}>\r\n                            {todo.text}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"close\"\r\n                                aria-label=\"Close\"\r\n                                onClick={(e) => this.handleDeleteTodo(todo.id, e)}\r\n                            >\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: state.todos\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators(TodoActions, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\r\n","import React from 'react';\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nimport Header from './components/Header';\r\n\r\nimport { store, persistor } from \"./store\";\r\nimport TodoList from \"./components/TodoList\";\r\n\r\n\r\nconst App = () => (\r\n\t<div className=\"App\">\r\n\t\t<Header />\r\n\t\t<Provider store={store}>\r\n\t\t\t<PersistGate loading={null} persistor={persistor}>\r\n\t\t\t\t<TodoList />\r\n\t\t\t</PersistGate>\r\n\t\t</Provider>\r\n\t</div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}